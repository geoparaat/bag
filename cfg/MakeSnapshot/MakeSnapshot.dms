////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
//                                                                                    //
//              Configuratie voor project: BAG FSS Files > Make Snapshot              //
//                                                                                    //
//                              Object Vision 2018                                    //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
// Template die de resultaten per BAG Objecttype verzamelt, selecteert en wegschrijft //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////

template MakeSnapshot
{
	// begin case parameters
	parameter<eenheden/datum> prik_datum;
	parameter<bool>           met_geo_sel;
	parameter<bool>           met_status_sel;
	parameter<bool>           met_pandhoogte_attributen;
	// end case parameters

	parameter<string> SnapshotGeoDirPart := met_geo_sel ? geo_selectie/Label + '/' : '';
	parameter<string> SnapshotDir        := SnapshotBaseDir + '/' + SnapshotGeoDirPart + string(prik_datum) + '.new';

	parameter<string> SuppliersExpr := 
		'ligplaats/results/unique;'
		'standplaats/results/unique;'
		'pand/results/unique;'
		'vbo/results/unique;'
		'nummeraanduiding/results/unique;'
		'openbareruimte/results/unique;'
		'woonplaats/results/unique;'
		'afleidingen/adres;'
		'overzichten/impl/genereer_rapport' 
		+ (met_pandhoogte_attributen ? ';pand/results/phn' : ''); //

	parameter<string> MaakVolledigeSnapshot := 'ready',
		ExplicitSuppliers = "= SuppliersExpr";

	parameter<string> MaakAlleenAdressenTabel := 'ready'
	,	ExplicitSuppliers = "afleidingen/adres";

	container ligplaats
	{
		unit<uint32> src
		:	StorageName     = "= FSSDir + '/ligplaats.fss'"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc_mm> geometry_mm (polygon);
			attribute<string>            identificatie;
			attribute<string>            nummeraanduiding_id;

			container meta          := meta_src_template(src, typeringen/status/ligplaats);
			container geo_selectie  := = met_geo_sel
				? 'polygon_selectie(src, geometry_mm)'
				: 'nl_selectie()';

			unit<uint32> nevenadres // 1->0..n relatie
			{
				attribute<string> nummeraanduiding_id;
				attribute<src>    parent_rel;
				attribute<string> ligplaats_id := src/identificatie[parent_rel], DisableStorage = "True";
			}
		}
		container results:=
			='datum_selectie(src, prik_datum, '+ (met_geo_sel 
					? 'True,  src/geo_selectie/result'
					: 'False'
				)
			+ ')'
		{
			unit<uint32> selectie
			{
				attribute<geometries/rdc_mm> geometry_mm (polygon) := domain/geometry_mm[selectie/nr_OrgEntity];
				attribute<string>            identificatie         := domain/identificatie[selectie/nr_OrgEntity];
				attribute<string>            nummeraanduiding_id   := domain/nummeraanduiding_id[selectie/nr_OrgEntity];
				attribute<unique>            unique_rel            := rlookup(identificatie,unique/values);
			}

			unit<uint32> unique := unique(selectie/identificatie), StorageName= "= SnapshotDir + '/ligplaats.fss'"
			{
				attribute<uint32>            count                 := pcount(selectie/unique_rel), DisableStorage = "True";
				attribute<geometries/rdc_mm> geometry_mm (polygon) := rjoin(values, selectie/identificatie, selectie/geometry_mm);

				attribute<string>            values                : DisableStorage = "True";
				attribute<string>            identificatie         := values;
				attribute<string>            nummeraanduiding_id   := last(selectie/nummeraanduiding_id, selectie/unique_rel);

				container meta := meta_template(selectie, unique);

				unit<uint32> nevenadres := Subset(isDefined(rlookup(src/nevenadres/parent_rel,selectie/nr_OrgEntity))) // is een 1->0..n relatie
				{
					attribute<string> nummeraanduiding_id := src/nevenadres/nummeraanduiding_id[nr_OrgEntity];
					attribute<string> ligplaats_id        := src/nevenadres/ligplaats_id[nr_OrgEntity];
					attribute<uint32> nr_OrgEntity        : DisableStorage = "True";
				}
			}
		}
	}

	container standplaats
	{
		unit<uint32> src
		:	StorageName     = "= FSSDir + '/standplaats.fss'"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc_mm> geometry_mm (polygon);
			attribute<string>            identificatie;
			attribute<string>            nummeraanduiding_id;

			container meta          := meta_src_template(src, typeringen/status/standplaats);
			container geo_selectie  := = met_geo_sel
				? 'polygon_selectie(src, geometry_mm)'
				: 'nl_selectie()';

			unit<uint32> nevenadres // 1->0..n relatie
			{
				attribute<string> nummeraanduiding_id;
				attribute<src>    parent_rel;
				attribute<string> standplaats_id := src/identificatie[parent_rel], DisableStorage = "True";
			}
		}

		container results:=
			='datum_selectie(src, prik_datum, '+ (met_geo_sel 
					? 'True,  src/geo_selectie/result'
					: 'False'
				)
			+ ')'
		{
			unit<uint32> selectie
			{
				attribute<geometries/rdc_mm> geometry_mm (polygon) := domain/geometry_mm[selectie/nr_OrgEntity];
				attribute<string>            identificatie         := domain/identificatie[selectie/nr_OrgEntity];
				attribute<string>            nummeraanduiding_id   := domain/nummeraanduiding_id[selectie/nr_OrgEntity];
				attribute<unique>            unique_rel            := rlookup(identificatie,unique/values);
			}

			unit<uint32> unique := unique(selectie/identificatie), StorageName= "= SnapshotDir + '/standplaats.fss'"
			{
				attribute<uint32> count := pcount(selectie/unique_rel), DisableStorage = "True";
				// DEBUG
				// attribute<geometries/rdc>  geometry (polygon) := last(selectie/geometry, selectie/unique_rel);
				attribute<geometries/rdc_mm> geometry_mm (polygon) := rjoin(values, selectie/identificatie, selectie/geometry_mm);

				attribute<string> values              : DisableStorage = "True";
				attribute<string> identificatie       := values;
				attribute<string> nummeraanduiding_id := last(selectie/nummeraanduiding_id, selectie/unique_rel);

				container meta := meta_template(selectie, unique);

				unit<uint32> nevenadres := Subset(isDefined(rlookup(src/nevenadres/parent_rel,selectie/nr_OrgEntity))) // is een 1->0..n relatie
				{
					attribute<string> nummeraanduiding_id := src/nevenadres/nummeraanduiding_id[nr_OrgEntity];
					attribute<string> standplaats_id      := src/nevenadres/standplaats_id[nr_OrgEntity];
					attribute<uint32> nr_OrgEntity        : DisableStorage = "True";
				}
			}
		}
	}

	container pand
	{
		unit<uint32> src
		:	StorageName     = "= FSSDir + '/pand.fss'"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc_mm> geometry_mm (polygon);
			attribute<string>            identificatie;
			attribute<eenheden/jaar>     bouwjaar;

			container meta          := meta_src_template(src, typeringen/status/pand);
			container geo_selectie  := = met_geo_sel
				? 'polygon_selectie(src, geometry_mm)'
				: 'nl_selectie()';
		}

		container results :=
			='datum_selectie(src, prik_datum, '+ (met_geo_sel 
					? 'True,  src/geo_selectie/result'
					: 'False'
				)
			+ ')'
		{
			unit<uint32> selectie
			{
				attribute<geometries/rdc_mm> geometry_mm (polygon) := domain/geometry_mm[selectie/nr_OrgEntity];
				attribute<string>            identificatie         := domain/identificatie[selectie/nr_OrgEntity];
				attribute<eenheden/jaar>     bouwjaar              := domain/bouwjaar[selectie/nr_OrgEntity];
				attribute<unique>            unique_rel            := rlookup(identificatie,unique/identificatie);
			}

			unit<uint32> unique_base := unique(selectie/identificatie);
			unit<uint32> unique      := TiledUnit(1000000[unique_base])
			,	StorageName = "= SnapshotDir + '/pand.fss'"
			,	DialogType  = "Map"
			,	DialogData  = "geometry_mm"
			,	FreeData    = "False"
			{
				attribute<uint32>                                              sel_count             := pcount(selectie/unique_rel)        , DisableStorage = "True";
				attribute<uint32>                                              vbo_count             := pcount(vbo/results/unique/pand_rel), DisableStorage = "True";
				attribute<geometries/rdc_mm>                                   geometry_mm (polygon) := rjoin(identificatie, selectie/identificatie, selectie/geometry_mm);

				attribute<string>                                              identificatie         := unique_base/values[mapping(unique,unique_base)];
				attribute<eenheden/jaar>                                       bouwjaar              := last(selectie/bouwjaar, selectie/unique_rel);
				attribute<uint32>                                              nr_buurpanden         := afleidingen/pand_attributen/geometrie/results/nr_buurpanden;
				attribute<afleidingen/pand_attributen/geometrie/type_woonpand> WOONPAND_TYPE         := afleidingen/pand_attributen/geometrie/results/type_woonpand_rel;

				container meta := meta_template(selectie, unique);
				
				container gebruiksdoelen:=
					for_each_nedv(
						'nr_'+ typeringen/gebruiksdoel_vbo/name
						, 'sum(vbo/results/unique/gebruiksdoelen/' + typeringen/gebruiksdoel_vbo/name + ' ? 1 : 0 , vbo/results/unique/pand_rel)'
						, unique
						, uint32
					);

			}
			unit<uint32> phn := unique
			,	StorageName = "= SnapshotDir + '/pand.fss'"
			,	DialogType  = "Map"
			,	DialogData  = "geometry_mm"
			,	FreeData    = "False"
			{
				attribute<eenheden/cm_uint16> AHN_hoogte    := afleidingen/pand_attributen/hoogte/AHN_hoogte;
				attribute<uint16>             AHN_inwinjaar := afleidingen/pand_attributen/hoogte/AHN_inwinjaar;
				attribute<bool>               obvAHN3       := afleidingen/pand_attributen/hoogte/obvAHN3;
			}
		}
	}


	container vbo
	{
		unit<uint32> src
		:	StorageName     = "= FSSDir + '/vbo.fss'"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc_mm> geometry_mm;
			attribute<string>            identificatie;
			attribute<string>            nummeraanduiding_id;
			attribute<int32>             oppervlakte;

			container meta := meta_src_template(src, typeringen/status/vbo);

			container gebruiksdoelen :=
				for_each_ndv(
					typeringen/gebruiksdoel_vbo/name
					, src
					, bool
				);

			unit<uint32> polygon // is een 1->0..1 relatie
			{
				attribute<geometries/rdc_mm> geometry_mm (polygon);
				attribute<src>               parent_rel;
				attribute<string>            vbo_id      := src/identificatie[parent_rel], DisableStorage = "True";
				attribute<geometries/rdc_mm> centroid_mm := centroid(geometry_mm);
			}

			attribute<geometries/rdc_mm> centroid_mm := polygon/centroid_mm[invert(polygon/parent_rel)];

			unit<uint32> gerelateerdPand // is een 1->0..n relatie
			{
				attribute<string> pand_id;
				attribute<src>    parent_rel;
				attribute<string> vbo_id           := src/identificatie[parent_rel], DisableStorage = "True";
				attribute<bool>   Pandgeo_selectie := IsDefined(rlookup(pand_id, pand/results/selectie/identificatie));
			}

			unit<uint32> nevenadres // is een 1->0..n relatie
			{
				attribute<string> nummeraanduiding_id;
				attribute<src>    parent_rel;
				attribute<string> vbo_id := src/identificatie[parent_rel], DisableStorage = "True";
			}
			
			attribute<bool> GerelateerdPandgeo_selectie := any(gerelateerdPand/Pandgeo_selectie, gerelateerdPand/parent_rel);
		}

		container results:=
			='datum_selectie(src, prik_datum, ' + (met_geo_sel 
					? 'True,  src/GerelateerdPandgeo_selectie'
					: 'False'
				)
			+ ')'
		{
			unit<uint32> selectie
			{
				attribute<geometries/rdc_mm> geometry_mm_raw_or_centroid := MakeDefined(domain/geometry_mm, domain/centroid_mm)[selectie/nr_OrgEntity]; // Op snapshot moment willen we alleen punt geometrien hebben voor vbo's
				attribute<int32> X := PointCol(geometry_mm_raw_or_centroid);
				attribute<int32> Y := PointRow(geometry_mm_raw_or_centroid);
				attribute<geometries/rdc_mm> geometry_mm :=
					   X >=  -8000000i &&  X <= 300000000i
					&& Y >= 289000000i &&  Y <= 629000000i
						? geometry_mm_raw_or_centroid
						: point(0i/0i, 0i/0i, geometries/rdc_mm);
				// Op snapshot moment willen we alleen geometrien in NL (https://nl.wikipedia.org/wiki/Rijksdriehoeksco%C3%B6rdinaten), dit ten behoeve van gemiddelde bepalingen (denk aan coordinaten voor geocode)

				attribute<string> identificatie       := domain/identificatie[selectie/nr_OrgEntity];
				attribute<int32>  oppervlakte         := domain/oppervlakte[selectie/nr_OrgEntity];
				attribute<string> nummeraanduiding_id := domain/nummeraanduiding_id[selectie/nr_OrgEntity];
				attribute<unique> unique_rel          := rlookup(identificatie,unique/identificatie);

			container gebruiksdoelen :=
				for_each_nedv(
					typeringen/gebruiksdoel_vbo/name
					, 'domain/gebruiksdoelen/' + typeringen/gebruiksdoel_vbo/name + '[selectie/nr_OrgEntity]'
					, selectie
					, bool
				);
			}

			unit<uint32> unique_base := unique(selectie/identificatie);
			unit<uint32> unique      := TiledUnit(1000000[unique_base])
			,	StorageName = "= SnapshotDir + '/vbo.fss'"
			,	DialogType  = "Map"
			,	DialogData  = "geometry_mm"
			,	FreeData    = "False"
			{
				attribute<uint32>              count               := pcount(selectie/unique_rel), DisableStorage = "True";

				attribute<geometries/rdc_mm>   geometry_mm         := rjoin(identificatie, selectie/identificatie, selectie/geometry_mm);
				attribute<string>              identificatie       := unique_base/values[mapping(unique, unique_base)];
				attribute<int32>               oppervlakte         := last(selectie/oppervlakte, selectie/unique_rel);
				attribute<string>              nummeraanduiding_id := last(selectie/nummeraanduiding_id, selectie/unique_rel);

				attribute<pand/results/unique> pand_rel            := point_in_polygon(geometry_mm, pand/results/unique/geometry_mm);
				attribute<string>              pand_id_geom        := pand/results/unique/identificatie[pand_rel];

				container gebruiksdoelen:=
					for_each_nedv(
						typeringen/gebruiksdoel_vbo/name
						, 'last(selectie/gebruiksdoelen/' + typeringen/gebruiksdoel_vbo/name + ', selectie/unique_rel)'
						, unique
						, bool
					);

				container meta := meta_template(selectie, unique);

				unit<uint32> gerelateerdPand := Subset(isDefined(rlookup(src/gerelateerdPand/parent_rel,selectie/nr_OrgEntity))) // is een 1->0..n relatie
				{
					attribute<string> pand_id      := src/gerelateerdPand/pand_id[nr_OrgEntity];
					attribute<string> vbo_id       := src/gerelateerdPand/vbo_id[nr_OrgEntity];
					attribute<uint32> nr_OrgEntity : DisableStorage = "True";
				}

				unit<uint32> nevenadres := Subset(isDefined(rlookup(src/nevenadres/parent_rel,selectie/nr_OrgEntity))) // is een 1->0..n relatie
				{
					attribute<string> nummeraanduiding_id := src/nevenadres/nummeraanduiding_id[nr_OrgEntity];
					attribute<string> vbo_id              := src/nevenadres/vbo_id[nr_OrgEntity];
					attribute<uint32> nr_OrgEntity        : DisableStorage = "True";
				}
			}
		}
	}

	container nummeraanduiding
	{
		unit<uint32> src
		:	StorageName     = "= FSSDir + '/nummeraanduiding.fss'"
		,	StorageReadOnly = "True"
		{
			attribute<string> identificatie;
			attribute<int32>  huisnummer;
			attribute<string> huisletter;
			attribute<string> toevoeging;
			attribute<string> postcode;
			attribute<string> typeAdresseerbaarObject;
			attribute<string> openbareruimte_id;

			container meta := meta_src_template(src, typeringen/status/nummeraanduiding);
			attribute<bool> OpenbareruimteInSelectie := isDefined(rlookup(openbareruimte_id, openbareruimte/results/selectie/identificatie));

			unit<uint32> gerelateerdeWoonplaats // is een 1->0..n relatie
			{
				attribute<string> woonplaats_id;
				attribute<src>    parent_rel;
				attribute<string> nummeraanduiding_id := src/identificatie[parent_rel], DisableStorage = "True";
			}
		}

		container results:=
			='datum_selectie(src, prik_datum, ' + (met_geo_sel 
					? 'True,  src/OpenbareruimteInSelectie'
					: 'False'
				)
			+ ')'
		{
			unit<uint32> selectie
			{
				attribute<string> identificatie           := domain/identificatie[selectie/nr_OrgEntity];
				attribute<int32>  huisnummer              := domain/huisnummer[selectie/nr_OrgEntity];
				attribute<string> huisletter              := domain/huisletter[selectie/nr_OrgEntity];
				attribute<string> toevoeging              := domain/toevoeging[selectie/nr_OrgEntity];
				attribute<string> postcode                := domain/postcode[selectie/nr_OrgEntity];
				attribute<string> typeAdresseerbaarObject := domain/typeAdresseerbaarObject[selectie/nr_OrgEntity];
				attribute<string> openbareruimte_id       := domain/openbareruimte_id[selectie/nr_OrgEntity];

				attribute<unique> unique_rel              := rlookup(identificatie,unique/identificatie);
			}

			unit<uint32> unique_base := unique(selectie/identificatie);
			unit<uint32> unique      := TiledUnit(1000000[unique_base])
			,	StorageName = "= SnapshotDir + '/nummeraanduiding.fss'"
			,	FreeData    = "False"
			{
				attribute<uint32> count := pcount(selectie/unique_rel), DisableStorage = "True";

				attribute<string> identificatie           := unique_base/values[mapping(unique, unique_base)];
				attribute<int32>  huisnummer              := last(selectie/huisnummer, selectie/unique_rel);
				attribute<string> huisletter              := last(selectie/huisletter, selectie/unique_rel);
				attribute<string> toevoeging              := last(selectie/toevoeging, selectie/unique_rel);
				attribute<string> postcode                := last(selectie/postcode  , selectie/unique_rel);
				attribute<string> typeAdresseerbaarObject := last(selectie/typeAdresseerbaarObject  , selectie/unique_rel);
				attribute<string> openbareruimte_id       := last(selectie/openbareruimte_id  , selectie/unique_rel);

				container meta := meta_template(selectie, unique);

				unit<uint32> gerelateerdeWoonplaats := Subset(isDefined(rlookup(src/gerelateerdeWoonplaats/parent_rel,selectie/nr_OrgEntity))) // is een 1->0..n relatie
				{
					attribute<string> woonplaats_id       := src/gerelateerdeWoonplaats/woonplaats_id[nr_OrgEntity];
					attribute<string> nummeraanduiding_id := src/gerelateerdeWoonplaats/nummeraanduiding_id[nr_OrgEntity];
					attribute<uint32> nr_OrgEntity        : DisableStorage = "True";
				}
			}
		}
	}

	container openbareruimte
	{
		unit<uint32> src
		:	StorageName     = "= FSSDir + '/openbareruimte.fss'"
		,	StorageReadOnly = "True"
		{
			attribute<string> identificatie;
			attribute<string> naam;
			attribute<string> type;
			attribute<string> woonplaats_id;

			container meta := meta_src_template(src, typeringen/status/openbareruimte);
			attribute<bool> Woonplaatsgeo_selectie := isDefined(rlookup(woonplaats_id, woonplaats/results/selectie/identificatie));
		}

		container results:=
			='datum_selectie(src, prik_datum, ' + (met_geo_sel 
					? 'True,  src/Woonplaatsgeo_selectie'
					: 'False'
				)
			+ ')'
		{
			unit<uint32> selectie
			{
				attribute<string> identificatie := domain/identificatie[nr_OrgEntity];
				attribute<string> naam          := domain/naam[nr_OrgEntity];
				attribute<string> type          := domain/type[nr_OrgEntity];
				attribute<string> woonplaats_id := domain/woonplaats_id[nr_OrgEntity];

				attribute<unique> unique_rel    := rlookup(identificatie,unique/values);
			}

			unit<uint32> unique:= unique(selectie/identificatie), StorageName= "= SnapshotDir + '/openbareruimte.fss'"
			{
				attribute<uint32> count  := pcount(selectie/unique_rel), DisableStorage = "True";
				attribute<string> values : DisableStorage = "True";

				attribute<string> identificatie := values;
				attribute<string> naam          := last(selectie/naam         , selectie/unique_rel);
				attribute<string> type          := last(selectie/type         , selectie/unique_rel);
				attribute<string> woonplaats_id := last(selectie/woonplaats_id, selectie/unique_rel);

				container meta := meta_template(selectie, unique);
			}
		}
	}
	container woonplaats
	{
		unit<uint32> src
		:	StorageName     = "= FSSDir + '/woonplaats.fss'"
		,	StorageReadOnly = "True"
		{
			attribute<geometries/rdc_mm> geometry_mm (polygon);
			attribute<string>            identificatie;
			attribute<string>            woonplaatsNaam;

			container meta          := meta_src_template(src, typeringen/status/woonplaats);
			container geo_selectie  := = met_geo_sel
				? 'polygon_selectie(src, geometry_mm)'
				: 'nl_selectie()';
		}

		container results :=
			='datum_selectie(src, prik_datum, ' + (met_geo_sel 
					? 'True,  src/geo_selectie/result'
					: 'False'
				)
			+ ')'
		{
			unit<uint32> selectie
			{
				attribute<geometries/rdc_mm> geometry_mm (polygon) := domain/geometry_mm[selectie/nr_OrgEntity];
				attribute<string>            identificatie         := domain/identificatie[selectie/nr_OrgEntity];
				attribute<string>            woonplaatsNaam        := domain/woonplaatsNaam[selectie/nr_OrgEntity];

				attribute<unique>            unique_rel            := rlookup(identificatie,unique/values);
			}

			unit<uint32> unique:= unique(selectie/identificatie), StorageName= "= SnapshotDir + '/woonplaats.fss'"
			{
				attribute<uint32> count  := pcount(selectie/unique_rel), DisableStorage = "True";
				attribute<string> values : DisableStorage = "True";

				attribute<geometries/rdc_mm> geometry_mm (polygon) := rjoin(values, selectie/identificatie, selectie/geometry_mm);
				attribute<string>            identificatie         := values;
				attribute<string>            woonplaatsNaam        := last(selectie/woonplaatsNaam, selectie/unique_rel);

				container meta := meta_template(selectie, unique);
			}
		}
	}
	#include<afleidingen.dms>
	#include<overzichten.dms>
	#include<pc6.dms>
}
